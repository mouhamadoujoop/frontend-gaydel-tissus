{"version":3,"file":"default-src_app_components_accounts_accounts-create-update_accounts-create-update_component_t-13cd2e.js","mappings":"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","sources":["./src/app/components/accounts/accounts-create-update/accounts-create-update.component.ts","./src/app/components/accounts/accounts-create-update/accounts-create-update.component.html","./src/app/models/accounts.ts","./src/app/models/clients.ts","./src/app/services/account/accounts.service.ts","./src/app/services/client/clients.service.ts"],"sourcesContent":["\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, ReactiveFormsModule, UntypedFormControl, Validators } from '@angular/forms';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogModule,\r\n  MatDialogRef\r\n} from '@angular/material/dialog';\r\nimport { Account } from '../../../models/accounts';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AsyncPipe, NgForOf, NgIf } from '@angular/common';\r\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { Product } from '../../../models/products';\r\nimport { Client } from '../../../models/clients';\r\nimport { ClientsService } from '../../../services/client/clients.service';\r\n\r\n@Component({\r\n  selector: 'vex-accounts-create-update',\r\n  templateUrl: './accounts-create-update.component.html',\r\n  styleUrls: ['./accounts-create-update.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    MatDialogModule,\r\n    NgIf,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatDividerModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    AsyncPipe,\r\n    MatAutocompleteModule,\r\n    MatOptionModule,\r\n    NgForOf\r\n  ]\r\n})\r\nexport class AccountsCreateUpdateComponent implements OnInit {\r\n  static id = 100;\r\n  clientId : number=0;\r\n  clients:  Client[] = [] ;\r\n  clientName: string = \"\";\r\n  userConnected! : any\r\n  site_id! : number\r\n  form = this.fb.group({\r\n    id: [AccountsCreateUpdateComponent.id++],\r\n    balance: [this.defaults?.balance, [Validators.required, Validators.min(1)]],\r\n    client_id: [this.defaults?.client_id || ''],\r\n    client: [this.defaults?.client || ''],\r\n\r\n    // full_name: [this.defaults?.full_name || ''],\r\n    // client_id: [this.defaults?.client_id || ''],\r\n    // balance: [this.defaults?.balance || 0, [Validators.required, Validators.min(0)]],\r\n    // paymentOrAdvance: [0, [Validators.required, Validators.min(0)]]\r\n\r\n});\r\n\r\n  mode: 'create' | 'update' = 'create';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public defaults: Account | undefined,\r\n    private dialogRef: MatDialogRef<AccountsCreateUpdateComponent>,\r\n    private fb: FormBuilder,\r\n    private snackbar: MatSnackBar,\r\n    private clientService: ClientsService\r\n  ) {}\r\n  getClientsBySite() {\r\n    return this.clientService.getClientsBySite(this.site_id).pipe(\r\n      map((result: any) => {\r\n          this.clients = result.data;\r\n\r\n        return this.clients.map((client) => new Client(client));\r\n      })\r\n    );\r\n  }\r\n  ngOnInit() {\r\n    this.userConnected = localStorage.getItem('dataUser');\r\n    this.userConnected = JSON.parse(this.userConnected);\r\n    this.site_id = this.userConnected.site_id;\r\n    this.getClientsBySite().subscribe(clients => {\r\n      this.clients = clients;\r\n      if (this.defaults) {\r\n        this.mode = 'update';\r\n      } else {\r\n        this.defaults = {} as Account;\r\n      }\r\n      this.form.patchValue(this.defaults);\r\n    });\r\n  }\r\n\r\n  save() {\r\n    if (this.mode === 'create') {\r\n      this.createAccount();\r\n    } else if (this.mode === 'update') {\r\n      this.updateAccount();\r\n    }\r\n  }\r\n\r\n  createAccount() {\r\n    this.form.get('client_id')?.setValue(this.clientId);\r\n    this.form.get('client')?.setValue(this.clientName);\r\n    const account = this.form.value;\r\n    this.dialogRef.close(account);\r\n  }\r\n\r\n  updateAccount() {\r\n    const account = this.form.value;\r\n    console.log(account);\r\n    if (!this.defaults) {\r\n      throw new Error(\r\n        'Account ID does not exist, this account cannot be updated'\r\n      );\r\n    }\r\n\r\n    account.id = this.defaults.id;\r\n\r\n    this.dialogRef.close(account);\r\n  }\r\n\r\n    isCreateMode() {\r\n    return this.mode === 'create';\r\n  }\r\n\r\n  isUpdateMode() {\r\n    return this.mode === 'update';\r\n  }\r\n  getClientNameById(id: number): string {\r\n    this.clientId=id;\r\n    const client = this.clients.find(c => c.id === id);\r\n    this.clientName = client ? client.full_name : '';\r\n    return client ? client.full_name : '';\r\n  }\r\n  clientCtrl: UntypedFormControl = new UntypedFormControl('', [Validators.required]);\r\n\r\n\r\n}\r\n\r\n","<form (ngSubmit)=\"save()\" [formGroup]=\"form\">\r\n  <div class=\"flex items-center\" mat-dialog-title>\r\n\r\n    <h2 *ngIf=\"form.controls.id.value\" class=\"headline m-0 flex-auto\">\r\n      {{ form.controls.id.value }}\r\n    </h2>\r\n    <h2 *ngIf=\"!form.controls.id.value && !form.controls.id.value\" class=\"headline m-0 flex-auto\">\r\n      Nouveau Compte\r\n    </h2>\r\n\r\n    <button\r\n      class=\"text-secondary\"\r\n      mat-dialog-close\r\n      mat-icon-button\r\n      type=\"button\">\r\n      <mat-icon svgIcon=\"mat:close\"></mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <mat-divider class=\"text-border\"></mat-divider>\r\n  <mat-dialog-content class=\"flex flex-col\">\r\n    <mat-form-field class=\"w-300 max-w-full\" >\r\n      <mat-label>Selectionner Client</mat-label>\r\n      <input [formControl]=\"clientCtrl\" [matAutocomplete]=\"auto\" matInput [value]=\"getClientNameById(clientCtrl.value)\"/>\r\n      <mat-autocomplete #auto=\"matAutocomplete\">\r\n        <mat-option\r\n          *ngFor=\"let client of clients \"\r\n          [value]=\"client.id\" >\r\n            <span class=\"flex items-center\">\r\n              <span class=\"flex flex-col\">\r\n                {{ client.full_name }}\r\n              </span>\r\n            </span>\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n      <button\r\n        (click)=\"clientCtrl.reset()\"\r\n        *ngIf=\"clientCtrl.value\"\r\n        mat-icon-button\r\n        matIconSuffix\r\n        type=\"button\">\r\n        <mat-icon svgIcon=\"mat:close\"></mat-icon>\r\n      </button>\r\n      <button *ngIf=\"!clientCtrl.value\" mat-icon-button matIconSuffix type=\"button\">\r\n        <mat-icon svgIcon=\"mat:arrow_drop_down\"></mat-icon>\r\n      </button>\r\n      <mat-error *ngIf=\"clientCtrl.invalid\">Veuillez sélectionner un client</mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field  class=\"flex-auto\">\r\n      <mat-label>Solde</mat-label>\r\n      <input  formControlName=\"balance\" matInput required min=1 />\r\n      <mat-icon matIconPrefix svgIcon=\"mat:payment\"></mat-icon>\r\n      <mat-error *ngIf=\"form.get('balance')?.hasError('required')\">\r\n        Solde requise\r\n      </mat-error>\r\n      <mat-error *ngIf=\"form.get('balance')?.hasError('min')\">\r\n        Solde doit être au moins 1\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button mat-dialog-close type=\"button\">Annuler</button>\r\n    <button *ngIf=\"isCreateMode() && form.invalid==false && clientCtrl.invalid==false\" color=\"primary\" mat-flat-button type=\"submit\">Nouveau Compte\r\n    </button>\r\n    <button *ngIf=\"isUpdateMode() && form.invalid==false\" color=\"primary\" mat-flat-button type=\"submit\">Modifier Compte\r\n    </button>\r\n  </mat-dialog-actions>\r\n\r\n</form>\r\n\r\n\r\n","\r\nexport class Account {\r\n  id: number;\r\n  client_id: number;\r\n  client: string;\r\n  balance: number\r\n  constructor(account: any) {\r\n    this.id = account.id;\r\n    this.client_id = account.client_id;\r\n    this.balance = account.balance;\r\n    this.client = (account.client && account.client.full_name) ? account.client.full_name : account.client;\r\n\r\n  }\r\n\r\n}\r\n","import { trigger } from '@angular/animations';\r\nimport { Account } from './accounts';\r\n\r\nexport class Client {\r\n  id: number;\r\n  full_name: string;\r\n  phone: string;\r\n  address: string;\r\n  balance: number;\r\n  site_id: number;\r\n  account_id: number;\r\n\r\n  constructor(client: any) {\r\n    this.id = client.id;\r\n    this.full_name = client.full_name;\r\n    this.phone = client.phone;\r\n    this.address = client.address;\r\n    this.balance = (client.account && client.account.balance) ? client.account.balance : 0;\r\n    this.account_id = (client.account && client.account.id) ? client.account.id : 0;\r\n    this.site_id = client.site_id\r\n\r\n     // this.hasAccount = true;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Account } from '../../models/accounts';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Site } from '../../models/sites';\r\nimport { Router } from '@angular/router';\r\nimport { LocalStorageService } from '../local-storage/local-storage.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccountsService {\r\n  BASE_URL = environment.BASE_URL\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private router: Router,\r\n    private localStorage: LocalStorageService) {\r\n  }\r\n\r\n  // addAccountToClient(id: number, account: Account): Observable<Account> {\r\n  //   return this.httpClient.post(`${this.BASE_URL}/accounts/`, account, { ...this.localStorage.getAuthorization() });\r\n  // }\r\n  getAccounts():Observable<any>{\r\n    return this.httpClient.get(`${this.BASE_URL}/accounts`, {... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n\r\n  addAccount(account:Account):Observable<any>{\r\n    return this.httpClient.post(`${this.BASE_URL}/accounts`, account,{... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n\r\n  updateAccount(account:Account):Observable<any>{\r\n    return this.httpClient.put(`${this.BASE_URL}/accounts/`+account.id, account,{... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n}\r\n","\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { LocalStorageService } from '../local-storage/local-storage.service';\r\nimport { Router } from '@angular/router';\r\nimport { Client } from 'src/app/models/clients';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientsService {\r\n  BASE_URL = environment.BASE_URL\r\n  //private API_URL= environment.API_URL;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private router: Router,\r\n    private localStorage: LocalStorageService\r\n  ){}\r\n\r\n\r\n\r\n  getClientsBySite(site_id: number):Observable<any>{\r\n    return this.httpClient.get(`${this.BASE_URL}/clients/site/${site_id}`, {... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n\r\n  getClientById(client_id: number):Observable<any>{\r\n    return this.httpClient.get(`${this.BASE_URL}/clients/${client_id}`, {... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n\r\n  getClientInvoice(client_id: number):Observable<any>{\r\n    return this.httpClient.get(`${this.BASE_URL}/clients/${client_id}/invoice`, {... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n  // getAccountByI(id: number):Observable<any>{\r\n  //   return this.httpClient.get(`${this.BASE_URL}/clients/account/${site_id}`, {... this.localStorage.getAuthorization()});\r\n  //\r\n  // }\r\n\r\n  addClients(client:Client):Observable<any>{\r\n    return this.httpClient.post(`${this.BASE_URL}/clients`, client,{... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n  updateClient(client:Client):Observable<any>{\r\n    return this.httpClient.put(`${this.BASE_URL}/clients/`+client.id, client,{... this.localStorage.getAuthorization()});\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n"],"names":["ReactiveFormsModule","UntypedFormControl","Validators","MAT_DIALOG_DATA","MatDialogModule","MatInputModule","MatFormFieldModule","MatDividerModule","MatIconModule","MatMenuModule","MatButtonModule","NgForOf","NgIf","MatSnackBarModule","MatAutocompleteModule","MatOptionModule","map","Client","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","form","controls","id","value","ɵɵproperty","client_r11","full_name","ɵɵlistener","AccountsCreateUpdateComponent_button_15_Template_button_click_0_listener","ɵɵrestoreView","_r13","ctx_r12","ɵɵnextContext","ɵɵresetView","clientCtrl","reset","ɵɵelement","AccountsCreateUpdateComponent","_","constructor","defaults","dialogRef","fb","snackbar","clientService","clientId","clients","clientName","group","balance","required","min","client_id","client","mode","getClientsBySite","site_id","pipe","result","data","ngOnInit","userConnected","localStorage","getItem","JSON","parse","subscribe","patchValue","save","createAccount","updateAccount","get","setValue","account","close","console","log","Error","isCreateMode","isUpdateMode","getClientNameById","find","c","_2","ɵɵdirectiveInject","i1","MatDialogRef","i2","FormBuilder","i3","MatSnackBar","i4","ClientsService","_3","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AccountsCreateUpdateComponent_Template","rf","ctx","AccountsCreateUpdateComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","AccountsCreateUpdateComponent_h2_2_Template","AccountsCreateUpdateComponent_h2_3_Template","AccountsCreateUpdateComponent_mat_option_14_Template","AccountsCreateUpdateComponent_button_15_Template","AccountsCreateUpdateComponent_button_16_Template","AccountsCreateUpdateComponent_mat_error_17_Template","AccountsCreateUpdateComponent_mat_error_23_Template","AccountsCreateUpdateComponent_mat_error_24_Template","AccountsCreateUpdateComponent_button_28_Template","AccountsCreateUpdateComponent_button_29_Template","_r2","invalid","tmp_10_0","hasError","tmp_11_0","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormControlDirective","FormGroupDirective","FormControlName","MatDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","i5","MatButton","MatIconButton","i6","MatIcon","i7","MatDivider","i8","MatFormField","MatLabel","MatError","MatPrefix","MatSuffix","i9","MatInput","i10","MatAutocomplete","i11","MatOption","MatAutocompleteTrigger","styles","Account","phone","address","account_id","environment","AccountsService","httpClient","router","BASE_URL","getAccounts","getAuthorization","addAccount","post","put","ɵɵinject","HttpClient","Router","LocalStorageService","factory","ɵfac","providedIn","getClientById","getClientInvoice","addClients","updateClient"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}